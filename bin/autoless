#!/usr/bin/env node
// vim: set ft=javascript :

var path = require('path');
var util = require('util');
var watch = require('watch');
var growl = require('growl');
var program = require('commander');
var less = require('less');
var Manager = require('../lib/manager');

program
  .usage('[options] <source_dir> [destination_dir]')
  .option('--interval <ms>', 'How often files are checked for changes', 100)
  .option('--no-watch', "Compile what needs to be compiled and exit")
  .parse(process.argv);

var srcDir = program.args[0] || process.cwd();
var dstDir = program.args[1] || srcDir;

// Replace a single '.' input as process.cwd() which is what they meant
srcDir = srcDir.replace(/^\.$/, process.cwd());
dstDir = dstDir.replace(/^\.$/, process.cwd());

var monitorOptions = {
  interval: program.interval
};

var statusChar = {
  'success': '✓',
  'error': '✖',
  'skipped': 'o'
};

var colors = {
  'success': 32,
  'error': 31,
  'skipped': 36
};

var resultMessage = {
  'success': '%d files successfully compiled.',
  'error': '%d files have errors.'
};

var manager = new Manager(srcDir, dstDir);

function color(status, str) {
  return '\u001b[' + colors[status] + 'm%s\u001b[0m';
}

function status(info) {
  return statusChar[info.status] + ' ' + info.src + (info.dst ? ' -> ' + info.dst : '');
}

function log(info) {
  console.log(color(info.status), status(info));
}

function notify(summary) {
  var message = [], result = 'success';
  summary.forEach(function(info) {
    if (info.status === 'error') {
      result = 'error';
      // don't show dst in notifications
      info.dst = null;
      message.push(status(info));
    }
  });
  message.unshift(util.format(
    resultMessage[result],
    result === 'success' ? summary.length : message.length
  ));

  growl(message.join('\n'), {
    title: 'LESS',
    image: path.join(__dirname, '../images', result + '.svg')
  });
}

// FIXME: when https://github.com/mikeal/watch/issues/40 is fixed, use
// filter in monitorOptions instead
function fileFilter(file) {
  return /\.less$|\.lessignore$/.test(file);
}

function check(file) {
  if (fileFilter(file)) {
    console.log('Change detected in ' + file);
    manager.check(file);
  }
}

watch.createMonitor(srcDir, monitorOptions, function(monitor) {
  var files = Object.keys(monitor.files).filter(fileFilter);

  manager.on('lessError', less.writeError);
  manager.on('check', log);
  manager.on('ignore', function(file) {
    console.log(file + ' created, ignoring changes.');
  });
  manager.on('resume', function(file) {
    console.log(file + ' removed, resuming monitoring.');
  });

  console.log('Finding files...');

  manager.addFiles(files, function() {
    manager.compileAll(function(errors) {
      if (!program.watch) process.exit(errors);

      monitor.on('changed', check);
      monitor.on('created', check);
      monitor.on('removed', manager.remove.bind(manager));

      manager.on('checkSummary', notify);

      console.log('Monitoring files in ' + srcDir);
    });
  });
});

